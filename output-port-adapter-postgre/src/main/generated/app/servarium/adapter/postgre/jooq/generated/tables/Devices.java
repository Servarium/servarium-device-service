/*
 * This file is generated by jOOQ.
 */
package app.servarium.adapter.postgre.jooq.generated.tables;


import app.servarium.adapter.postgre.jooq.generated.Keys;
import app.servarium.adapter.postgre.jooq.generated.Public;
import app.servarium.adapter.postgre.jooq.generated.enums.OsType;
import app.servarium.adapter.postgre.jooq.generated.tables.records.DevicesRecord;

import java.math.BigDecimal;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Devices extends TableImpl<DevicesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.devices</code>
     */
    public static final Devices DEVICES = new Devices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DevicesRecord> getRecordType() {
        return DevicesRecord.class;
    }

    /**
     * The column <code>public.devices.id</code>.
     */
    public final TableField<DevicesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.devices.os_type</code>.
     */
    public final TableField<DevicesRecord, OsType> OS_TYPE = createField(DSL.name("os_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(app.servarium.adapter.postgre.jooq.generated.enums.OsType.class), this, "");

    /**
     * The column <code>public.devices.os_version</code>.
     */
    public final TableField<DevicesRecord, String> OS_VERSION = createField(DSL.name("os_version"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.devices.cpu_name</code>.
     */
    public final TableField<DevicesRecord, String> CPU_NAME = createField(DSL.name("cpu_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.devices.gpu_name</code>.
     */
    public final TableField<DevicesRecord, String> GPU_NAME = createField(DSL.name("gpu_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.devices.ram_amount</code>.
     */
    public final TableField<DevicesRecord, BigDecimal> RAM_AMOUNT = createField(DSL.name("ram_amount"), SQLDataType.NUMERIC(6, 3), this, "");

    /**
     * The column <code>public.devices.main_disk_name</code>.
     */
    public final TableField<DevicesRecord, String> MAIN_DISK_NAME = createField(DSL.name("main_disk_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.devices.machine_name</code>.
     */
    public final TableField<DevicesRecord, String> MACHINE_NAME = createField(DSL.name("machine_name"), SQLDataType.VARCHAR(128), this, "");

    private Devices(Name alias, Table<DevicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Devices(Name alias, Table<DevicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.devices</code> table reference
     */
    public Devices(String alias) {
        this(DSL.name(alias), DEVICES);
    }

    /**
     * Create an aliased <code>public.devices</code> table reference
     */
    public Devices(Name alias) {
        this(alias, DEVICES);
    }

    /**
     * Create a <code>public.devices</code> table reference
     */
    public Devices() {
        this(DSL.name("devices"), null);
    }

    public <O extends Record> Devices(Table<O> child, ForeignKey<O, DevicesRecord> key) {
        super(child, key, DEVICES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DevicesRecord> getPrimaryKey() {
        return Keys.DEVICES_PKEY;
    }

    @Override
    public Devices as(String alias) {
        return new Devices(DSL.name(alias), this);
    }

    @Override
    public Devices as(Name alias) {
        return new Devices(alias, this);
    }

    @Override
    public Devices as(Table<?> alias) {
        return new Devices(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Devices rename(String name) {
        return new Devices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Devices rename(Name name) {
        return new Devices(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Devices rename(Table<?> name) {
        return new Devices(name.getQualifiedName(), null);
    }
}
