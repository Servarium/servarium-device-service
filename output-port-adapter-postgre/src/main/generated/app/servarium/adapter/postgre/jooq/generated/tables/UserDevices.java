/*
 * This file is generated by jOOQ.
 */
package app.servarium.adapter.postgre.jooq.generated.tables;


import app.servarium.adapter.postgre.jooq.generated.Keys;
import app.servarium.adapter.postgre.jooq.generated.Public;
import app.servarium.adapter.postgre.jooq.generated.tables.records.UserDevicesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDevices extends TableImpl<UserDevicesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_devices</code>
     */
    public static final UserDevices USER_DEVICES = new UserDevices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDevicesRecord> getRecordType() {
        return UserDevicesRecord.class;
    }

    /**
     * The column <code>public.user_devices.id</code>.
     */
    public final TableField<UserDevicesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_devices.user_id</code>.
     */
    public final TableField<UserDevicesRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_devices.device_id</code>.
     */
    public final TableField<UserDevicesRecord, UUID> DEVICE_ID = createField(DSL.name("device_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_devices.alias_name</code>.
     */
    public final TableField<UserDevicesRecord, String> ALIAS_NAME = createField(DSL.name("alias_name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private UserDevices(Name alias, Table<UserDevicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDevices(Name alias, Table<UserDevicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_devices</code> table reference
     */
    public UserDevices(String alias) {
        this(DSL.name(alias), USER_DEVICES);
    }

    /**
     * Create an aliased <code>public.user_devices</code> table reference
     */
    public UserDevices(Name alias) {
        this(alias, USER_DEVICES);
    }

    /**
     * Create a <code>public.user_devices</code> table reference
     */
    public UserDevices() {
        this(DSL.name("user_devices"), null);
    }

    public <O extends Record> UserDevices(Table<O> child, ForeignKey<O, UserDevicesRecord> key) {
        super(child, key, USER_DEVICES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UserDevicesRecord, Long> getIdentity() {
        return (Identity<UserDevicesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserDevicesRecord> getPrimaryKey() {
        return Keys.USER_DEVICES_PKEY;
    }

    @Override
    public List<UniqueKey<UserDevicesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_USER_ID_DEVICE_ID);
    }

    @Override
    public List<ForeignKey<UserDevicesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_DEVICES__FK_USER_DEVICES_DEVICES);
    }

    private transient Devices _devices;

    /**
     * Get the implicit join path to the <code>public.devices</code> table.
     */
    public Devices devices() {
        if (_devices == null)
            _devices = new Devices(this, Keys.USER_DEVICES__FK_USER_DEVICES_DEVICES);

        return _devices;
    }

    @Override
    public UserDevices as(String alias) {
        return new UserDevices(DSL.name(alias), this);
    }

    @Override
    public UserDevices as(Name alias) {
        return new UserDevices(alias, this);
    }

    @Override
    public UserDevices as(Table<?> alias) {
        return new UserDevices(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDevices rename(String name) {
        return new UserDevices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDevices rename(Name name) {
        return new UserDevices(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDevices rename(Table<?> name) {
        return new UserDevices(name.getQualifiedName(), null);
    }
}
